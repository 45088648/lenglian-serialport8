package com.beetech.serialport.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.beetech.serialport.bean.GpsDataBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GPS_DATA_BEAN".
*/
public class GpsDataBeanDao extends AbstractDao<GpsDataBean, Long> {

    public static final String TABLENAME = "GPS_DATA_BEAN";

    /**
     * Properties of entity GpsDataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Lat = new Property(1, double.class, "lat", false, "LAT");
        public final static Property Lng = new Property(2, double.class, "lng", false, "LNG");
        public final static Property Radius = new Property(3, float.class, "radius", false, "RADIUS");
        public final static Property Direction = new Property(4, float.class, "direction", false, "DIRECTION");
        public final static Property Speed = new Property(5, float.class, "speed", false, "SPEED");
        public final static Property Altitude = new Property(6, double.class, "altitude", false, "ALTITUDE");
        public final static Property Address = new Property(7, String.class, "address", false, "ADDRESS");
        public final static Property DataTime = new Property(8, java.util.Date.class, "dataTime", false, "DATA_TIME");
        public final static Property LocType = new Property(9, int.class, "locType", false, "LOC_TYPE");
        public final static Property SendFlag = new Property(10, int.class, "sendFlag", false, "SEND_FLAG");
    }


    public GpsDataBeanDao(DaoConfig config) {
        super(config);
    }
    
    public GpsDataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GPS_DATA_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"LAT\" REAL NOT NULL ," + // 1: lat
                "\"LNG\" REAL NOT NULL ," + // 2: lng
                "\"RADIUS\" REAL NOT NULL ," + // 3: radius
                "\"DIRECTION\" REAL NOT NULL ," + // 4: direction
                "\"SPEED\" REAL NOT NULL ," + // 5: speed
                "\"ALTITUDE\" REAL NOT NULL ," + // 6: altitude
                "\"ADDRESS\" TEXT," + // 7: address
                "\"DATA_TIME\" INTEGER," + // 8: dataTime
                "\"LOC_TYPE\" INTEGER NOT NULL ," + // 9: locType
                "\"SEND_FLAG\" INTEGER NOT NULL );"); // 10: sendFlag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GPS_DATA_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GpsDataBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindDouble(2, entity.getLat());
        stmt.bindDouble(3, entity.getLng());
        stmt.bindDouble(4, entity.getRadius());
        stmt.bindDouble(5, entity.getDirection());
        stmt.bindDouble(6, entity.getSpeed());
        stmt.bindDouble(7, entity.getAltitude());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(8, address);
        }
 
        java.util.Date dataTime = entity.getDataTime();
        if (dataTime != null) {
            stmt.bindLong(9, dataTime.getTime());
        }
        stmt.bindLong(10, entity.getLocType());
        stmt.bindLong(11, entity.getSendFlag());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GpsDataBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindDouble(2, entity.getLat());
        stmt.bindDouble(3, entity.getLng());
        stmt.bindDouble(4, entity.getRadius());
        stmt.bindDouble(5, entity.getDirection());
        stmt.bindDouble(6, entity.getSpeed());
        stmt.bindDouble(7, entity.getAltitude());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(8, address);
        }
 
        java.util.Date dataTime = entity.getDataTime();
        if (dataTime != null) {
            stmt.bindLong(9, dataTime.getTime());
        }
        stmt.bindLong(10, entity.getLocType());
        stmt.bindLong(11, entity.getSendFlag());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GpsDataBean readEntity(Cursor cursor, int offset) {
        GpsDataBean entity = new GpsDataBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getDouble(offset + 1), // lat
            cursor.getDouble(offset + 2), // lng
            cursor.getFloat(offset + 3), // radius
            cursor.getFloat(offset + 4), // direction
            cursor.getFloat(offset + 5), // speed
            cursor.getDouble(offset + 6), // altitude
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // address
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // dataTime
            cursor.getInt(offset + 9), // locType
            cursor.getInt(offset + 10) // sendFlag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GpsDataBean entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLat(cursor.getDouble(offset + 1));
        entity.setLng(cursor.getDouble(offset + 2));
        entity.setRadius(cursor.getFloat(offset + 3));
        entity.setDirection(cursor.getFloat(offset + 4));
        entity.setSpeed(cursor.getFloat(offset + 5));
        entity.setAltitude(cursor.getDouble(offset + 6));
        entity.setAddress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDataTime(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setLocType(cursor.getInt(offset + 9));
        entity.setSendFlag(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GpsDataBean entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GpsDataBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GpsDataBean entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
