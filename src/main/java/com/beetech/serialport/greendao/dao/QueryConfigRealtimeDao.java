package com.beetech.serialport.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.beetech.serialport.bean.QueryConfigRealtime;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUERY_CONFIG_REALTIME".
*/
public class QueryConfigRealtimeDao extends AbstractDao<QueryConfigRealtime, Long> {

    public static final String TABLENAME = "QUERY_CONFIG_REALTIME";

    /**
     * Properties of entity QueryConfigRealtime.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property HardVer = new Property(1, String.class, "hardVer", false, "HARD_VER");
        public final static Property SoftVer = new Property(2, String.class, "softVer", false, "SOFT_VER");
        public final static Property Customer = new Property(3, int.class, "customer", false, "CUSTOMER");
        public final static Property Debug = new Property(4, int.class, "debug", false, "DEBUG");
        public final static Property Category = new Property(5, int.class, "category", false, "CATEGORY");
        public final static Property Interval = new Property(6, int.class, "interval", false, "INTERVAL");
        public final static Property Calendar = new Property(7, java.util.Date.class, "calendar", false, "CALENDAR");
        public final static Property Pattern = new Property(8, int.class, "pattern", false, "PATTERN");
        public final static Property Bps = new Property(9, int.class, "bps", false, "BPS");
        public final static Property Channel = new Property(10, int.class, "channel", false, "CHANNEL");
        public final static Property RamData = new Property(11, int.class, "ramData", false, "RAM_DATA");
        public final static Property Front = new Property(12, int.class, "front", false, "FRONT");
        public final static Property Rear = new Property(13, int.class, "rear", false, "REAR");
        public final static Property PflashLength = new Property(14, int.class, "pflashLength", false, "PFLASH_LENGTH");
        public final static Property SendOk = new Property(15, int.class, "sendOk", false, "SEND_OK");
        public final static Property GwVoltage = new Property(16, double.class, "gwVoltage", false, "GW_VOLTAGE");
        public final static Property GwId = new Property(17, String.class, "gwId", false, "GW_ID");
    }


    public QueryConfigRealtimeDao(DaoConfig config) {
        super(config);
    }
    
    public QueryConfigRealtimeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUERY_CONFIG_REALTIME\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"HARD_VER\" TEXT," + // 1: hardVer
                "\"SOFT_VER\" TEXT," + // 2: softVer
                "\"CUSTOMER\" INTEGER NOT NULL ," + // 3: customer
                "\"DEBUG\" INTEGER NOT NULL ," + // 4: debug
                "\"CATEGORY\" INTEGER NOT NULL ," + // 5: category
                "\"INTERVAL\" INTEGER NOT NULL ," + // 6: interval
                "\"CALENDAR\" INTEGER," + // 7: calendar
                "\"PATTERN\" INTEGER NOT NULL ," + // 8: pattern
                "\"BPS\" INTEGER NOT NULL ," + // 9: bps
                "\"CHANNEL\" INTEGER NOT NULL ," + // 10: channel
                "\"RAM_DATA\" INTEGER NOT NULL ," + // 11: ramData
                "\"FRONT\" INTEGER NOT NULL ," + // 12: front
                "\"REAR\" INTEGER NOT NULL ," + // 13: rear
                "\"PFLASH_LENGTH\" INTEGER NOT NULL ," + // 14: pflashLength
                "\"SEND_OK\" INTEGER NOT NULL ," + // 15: sendOk
                "\"GW_VOLTAGE\" REAL NOT NULL ," + // 16: gwVoltage
                "\"GW_ID\" TEXT);"); // 17: gwId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUERY_CONFIG_REALTIME\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, QueryConfigRealtime entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String hardVer = entity.getHardVer();
        if (hardVer != null) {
            stmt.bindString(2, hardVer);
        }
 
        String softVer = entity.getSoftVer();
        if (softVer != null) {
            stmt.bindString(3, softVer);
        }
        stmt.bindLong(4, entity.getCustomer());
        stmt.bindLong(5, entity.getDebug());
        stmt.bindLong(6, entity.getCategory());
        stmt.bindLong(7, entity.getInterval());
 
        java.util.Date calendar = entity.getCalendar();
        if (calendar != null) {
            stmt.bindLong(8, calendar.getTime());
        }
        stmt.bindLong(9, entity.getPattern());
        stmt.bindLong(10, entity.getBps());
        stmt.bindLong(11, entity.getChannel());
        stmt.bindLong(12, entity.getRamData());
        stmt.bindLong(13, entity.getFront());
        stmt.bindLong(14, entity.getRear());
        stmt.bindLong(15, entity.getPflashLength());
        stmt.bindLong(16, entity.getSendOk());
        stmt.bindDouble(17, entity.getGwVoltage());
 
        String gwId = entity.getGwId();
        if (gwId != null) {
            stmt.bindString(18, gwId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, QueryConfigRealtime entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String hardVer = entity.getHardVer();
        if (hardVer != null) {
            stmt.bindString(2, hardVer);
        }
 
        String softVer = entity.getSoftVer();
        if (softVer != null) {
            stmt.bindString(3, softVer);
        }
        stmt.bindLong(4, entity.getCustomer());
        stmt.bindLong(5, entity.getDebug());
        stmt.bindLong(6, entity.getCategory());
        stmt.bindLong(7, entity.getInterval());
 
        java.util.Date calendar = entity.getCalendar();
        if (calendar != null) {
            stmt.bindLong(8, calendar.getTime());
        }
        stmt.bindLong(9, entity.getPattern());
        stmt.bindLong(10, entity.getBps());
        stmt.bindLong(11, entity.getChannel());
        stmt.bindLong(12, entity.getRamData());
        stmt.bindLong(13, entity.getFront());
        stmt.bindLong(14, entity.getRear());
        stmt.bindLong(15, entity.getPflashLength());
        stmt.bindLong(16, entity.getSendOk());
        stmt.bindDouble(17, entity.getGwVoltage());
 
        String gwId = entity.getGwId();
        if (gwId != null) {
            stmt.bindString(18, gwId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public QueryConfigRealtime readEntity(Cursor cursor, int offset) {
        QueryConfigRealtime entity = new QueryConfigRealtime( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // hardVer
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // softVer
            cursor.getInt(offset + 3), // customer
            cursor.getInt(offset + 4), // debug
            cursor.getInt(offset + 5), // category
            cursor.getInt(offset + 6), // interval
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // calendar
            cursor.getInt(offset + 8), // pattern
            cursor.getInt(offset + 9), // bps
            cursor.getInt(offset + 10), // channel
            cursor.getInt(offset + 11), // ramData
            cursor.getInt(offset + 12), // front
            cursor.getInt(offset + 13), // rear
            cursor.getInt(offset + 14), // pflashLength
            cursor.getInt(offset + 15), // sendOk
            cursor.getDouble(offset + 16), // gwVoltage
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // gwId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, QueryConfigRealtime entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHardVer(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSoftVer(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCustomer(cursor.getInt(offset + 3));
        entity.setDebug(cursor.getInt(offset + 4));
        entity.setCategory(cursor.getInt(offset + 5));
        entity.setInterval(cursor.getInt(offset + 6));
        entity.setCalendar(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setPattern(cursor.getInt(offset + 8));
        entity.setBps(cursor.getInt(offset + 9));
        entity.setChannel(cursor.getInt(offset + 10));
        entity.setRamData(cursor.getInt(offset + 11));
        entity.setFront(cursor.getInt(offset + 12));
        entity.setRear(cursor.getInt(offset + 13));
        entity.setPflashLength(cursor.getInt(offset + 14));
        entity.setSendOk(cursor.getInt(offset + 15));
        entity.setGwVoltage(cursor.getDouble(offset + 16));
        entity.setGwId(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(QueryConfigRealtime entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(QueryConfigRealtime entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(QueryConfigRealtime entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
