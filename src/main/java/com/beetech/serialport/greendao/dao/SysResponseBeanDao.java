package com.beetech.serialport.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.beetech.serialport.bean.SysResponseBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SYS_RESPONSE_BEAN".
*/
public class SysResponseBeanDao extends AbstractDao<SysResponseBean, Long> {

    public static final String TABLENAME = "SYS_RESPONSE_BEAN";

    /**
     * Properties of entity SysResponseBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property DevNum = new Property(1, String.class, "devNum", false, "DEV_NUM");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property DevEncryption = new Property(3, String.class, "devEncryption", false, "DEV_ENCRYPTION");
        public final static Property DevSendCycle = new Property(4, String.class, "devSendCycle", false, "DEV_SEND_CYCLE");
        public final static Property DevAutosend = new Property(5, String.class, "devAutosend", false, "DEV_AUTOSEND");
        public final static Property TempLower = new Property(6, String.class, "tempLower", false, "TEMP_LOWER");
        public final static Property TempHight = new Property(7, String.class, "tempHight", false, "TEMP_HIGHT");
        public final static Property BatteryLower = new Property(8, String.class, "batteryLower", false, "BATTERY_LOWER");
        public final static Property DevServerIp = new Property(9, String.class, "devServerIp", false, "DEV_SERVER_IP");
        public final static Property DevServerPort = new Property(10, String.class, "devServerPort", false, "DEV_SERVER_PORT");
        public final static Property SysDatetime = new Property(11, String.class, "sysDatetime", false, "SYS_DATETIME");
        public final static Property InputTime = new Property(12, java.util.Date.class, "inputTime", false, "INPUT_TIME");
        public final static Property RhLower = new Property(13, String.class, "rhLower", false, "RH_LOWER");
        public final static Property RhHight = new Property(14, String.class, "rhHight", false, "RH_HIGHT");
        public final static Property TempAlarmFlag = new Property(15, String.class, "tempAlarmFlag", false, "TEMP_ALARM_FLAG");
        public final static Property RhAlarmFlag = new Property(16, String.class, "rhAlarmFlag", false, "RH_ALARM_FLAG");
        public final static Property BatteryAlarmFlag = new Property(17, String.class, "batteryAlarmFlag", false, "BATTERY_ALARM_FLAG");
        public final static Property ExtPowerAlarmFlag = new Property(18, String.class, "extPowerAlarmFlag", false, "EXT_POWER_ALARM_FLAG");
        public final static Property UnqualifyRecordFlag = new Property(19, String.class, "unqualifyRecordFlag", false, "UNQUALIFY_RECORD_FLAG");
        public final static Property NextUpdateFlag = new Property(20, String.class, "nextUpdateFlag", false, "NEXT_UPDATE_FLAG");
        public final static Property UpdateUrl = new Property(21, String.class, "updateUrl", false, "UPDATE_URL");
        public final static Property Destination = new Property(22, String.class, "destination", false, "DESTINATION");
        public final static Property OrderNo = new Property(23, String.class, "orderNo", false, "ORDER_NO");
        public final static Property Receiver = new Property(24, String.class, "receiver", false, "RECEIVER");
        public final static Property Company = new Property(25, String.class, "company", false, "COMPANY");
        public final static Property DevTypeFlag = new Property(26, String.class, "devTypeFlag", false, "DEV_TYPE_FLAG");
        public final static Property AlarmInterval = new Property(27, String.class, "alarmInterval", false, "ALARM_INTERVAL");
        public final static Property TempLower1 = new Property(28, String.class, "tempLower1", false, "TEMP_LOWER1");
        public final static Property TempHight1 = new Property(29, String.class, "tempHight1", false, "TEMP_HIGHT1");
        public final static Property RhLower1 = new Property(30, String.class, "rhLower1", false, "RH_LOWER1");
        public final static Property RhHight1 = new Property(31, String.class, "rhHight1", false, "RH_HIGHT1");
        public final static Property EquipType = new Property(32, String.class, "equipType", false, "EQUIP_TYPE");
    }


    public SysResponseBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SysResponseBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYS_RESPONSE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"DEV_NUM\" TEXT," + // 1: devNum
                "\"USER_NAME\" TEXT," + // 2: userName
                "\"DEV_ENCRYPTION\" TEXT," + // 3: devEncryption
                "\"DEV_SEND_CYCLE\" TEXT," + // 4: devSendCycle
                "\"DEV_AUTOSEND\" TEXT," + // 5: devAutosend
                "\"TEMP_LOWER\" TEXT," + // 6: tempLower
                "\"TEMP_HIGHT\" TEXT," + // 7: tempHight
                "\"BATTERY_LOWER\" TEXT," + // 8: batteryLower
                "\"DEV_SERVER_IP\" TEXT," + // 9: devServerIp
                "\"DEV_SERVER_PORT\" TEXT," + // 10: devServerPort
                "\"SYS_DATETIME\" TEXT," + // 11: sysDatetime
                "\"INPUT_TIME\" INTEGER," + // 12: inputTime
                "\"RH_LOWER\" TEXT," + // 13: rhLower
                "\"RH_HIGHT\" TEXT," + // 14: rhHight
                "\"TEMP_ALARM_FLAG\" TEXT," + // 15: tempAlarmFlag
                "\"RH_ALARM_FLAG\" TEXT," + // 16: rhAlarmFlag
                "\"BATTERY_ALARM_FLAG\" TEXT," + // 17: batteryAlarmFlag
                "\"EXT_POWER_ALARM_FLAG\" TEXT," + // 18: extPowerAlarmFlag
                "\"UNQUALIFY_RECORD_FLAG\" TEXT," + // 19: unqualifyRecordFlag
                "\"NEXT_UPDATE_FLAG\" TEXT," + // 20: nextUpdateFlag
                "\"UPDATE_URL\" TEXT," + // 21: updateUrl
                "\"DESTINATION\" TEXT," + // 22: destination
                "\"ORDER_NO\" TEXT," + // 23: orderNo
                "\"RECEIVER\" TEXT," + // 24: receiver
                "\"COMPANY\" TEXT," + // 25: company
                "\"DEV_TYPE_FLAG\" TEXT," + // 26: devTypeFlag
                "\"ALARM_INTERVAL\" TEXT," + // 27: alarmInterval
                "\"TEMP_LOWER1\" TEXT," + // 28: tempLower1
                "\"TEMP_HIGHT1\" TEXT," + // 29: tempHight1
                "\"RH_LOWER1\" TEXT," + // 30: rhLower1
                "\"RH_HIGHT1\" TEXT," + // 31: rhHight1
                "\"EQUIP_TYPE\" TEXT);"); // 32: equipType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYS_RESPONSE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SysResponseBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String devNum = entity.getDevNum();
        if (devNum != null) {
            stmt.bindString(2, devNum);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String devEncryption = entity.getDevEncryption();
        if (devEncryption != null) {
            stmt.bindString(4, devEncryption);
        }
 
        String devSendCycle = entity.getDevSendCycle();
        if (devSendCycle != null) {
            stmt.bindString(5, devSendCycle);
        }
 
        String devAutosend = entity.getDevAutosend();
        if (devAutosend != null) {
            stmt.bindString(6, devAutosend);
        }
 
        String tempLower = entity.getTempLower();
        if (tempLower != null) {
            stmt.bindString(7, tempLower);
        }
 
        String tempHight = entity.getTempHight();
        if (tempHight != null) {
            stmt.bindString(8, tempHight);
        }
 
        String batteryLower = entity.getBatteryLower();
        if (batteryLower != null) {
            stmt.bindString(9, batteryLower);
        }
 
        String devServerIp = entity.getDevServerIp();
        if (devServerIp != null) {
            stmt.bindString(10, devServerIp);
        }
 
        String devServerPort = entity.getDevServerPort();
        if (devServerPort != null) {
            stmt.bindString(11, devServerPort);
        }
 
        String sysDatetime = entity.getSysDatetime();
        if (sysDatetime != null) {
            stmt.bindString(12, sysDatetime);
        }
 
        java.util.Date inputTime = entity.getInputTime();
        if (inputTime != null) {
            stmt.bindLong(13, inputTime.getTime());
        }
 
        String rhLower = entity.getRhLower();
        if (rhLower != null) {
            stmt.bindString(14, rhLower);
        }
 
        String rhHight = entity.getRhHight();
        if (rhHight != null) {
            stmt.bindString(15, rhHight);
        }
 
        String tempAlarmFlag = entity.getTempAlarmFlag();
        if (tempAlarmFlag != null) {
            stmt.bindString(16, tempAlarmFlag);
        }
 
        String rhAlarmFlag = entity.getRhAlarmFlag();
        if (rhAlarmFlag != null) {
            stmt.bindString(17, rhAlarmFlag);
        }
 
        String batteryAlarmFlag = entity.getBatteryAlarmFlag();
        if (batteryAlarmFlag != null) {
            stmt.bindString(18, batteryAlarmFlag);
        }
 
        String extPowerAlarmFlag = entity.getExtPowerAlarmFlag();
        if (extPowerAlarmFlag != null) {
            stmt.bindString(19, extPowerAlarmFlag);
        }
 
        String unqualifyRecordFlag = entity.getUnqualifyRecordFlag();
        if (unqualifyRecordFlag != null) {
            stmt.bindString(20, unqualifyRecordFlag);
        }
 
        String nextUpdateFlag = entity.getNextUpdateFlag();
        if (nextUpdateFlag != null) {
            stmt.bindString(21, nextUpdateFlag);
        }
 
        String updateUrl = entity.getUpdateUrl();
        if (updateUrl != null) {
            stmt.bindString(22, updateUrl);
        }
 
        String destination = entity.getDestination();
        if (destination != null) {
            stmt.bindString(23, destination);
        }
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(24, orderNo);
        }
 
        String receiver = entity.getReceiver();
        if (receiver != null) {
            stmt.bindString(25, receiver);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(26, company);
        }
 
        String devTypeFlag = entity.getDevTypeFlag();
        if (devTypeFlag != null) {
            stmt.bindString(27, devTypeFlag);
        }
 
        String alarmInterval = entity.getAlarmInterval();
        if (alarmInterval != null) {
            stmt.bindString(28, alarmInterval);
        }
 
        String tempLower1 = entity.getTempLower1();
        if (tempLower1 != null) {
            stmt.bindString(29, tempLower1);
        }
 
        String tempHight1 = entity.getTempHight1();
        if (tempHight1 != null) {
            stmt.bindString(30, tempHight1);
        }
 
        String rhLower1 = entity.getRhLower1();
        if (rhLower1 != null) {
            stmt.bindString(31, rhLower1);
        }
 
        String rhHight1 = entity.getRhHight1();
        if (rhHight1 != null) {
            stmt.bindString(32, rhHight1);
        }
 
        String equipType = entity.getEquipType();
        if (equipType != null) {
            stmt.bindString(33, equipType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SysResponseBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String devNum = entity.getDevNum();
        if (devNum != null) {
            stmt.bindString(2, devNum);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String devEncryption = entity.getDevEncryption();
        if (devEncryption != null) {
            stmt.bindString(4, devEncryption);
        }
 
        String devSendCycle = entity.getDevSendCycle();
        if (devSendCycle != null) {
            stmt.bindString(5, devSendCycle);
        }
 
        String devAutosend = entity.getDevAutosend();
        if (devAutosend != null) {
            stmt.bindString(6, devAutosend);
        }
 
        String tempLower = entity.getTempLower();
        if (tempLower != null) {
            stmt.bindString(7, tempLower);
        }
 
        String tempHight = entity.getTempHight();
        if (tempHight != null) {
            stmt.bindString(8, tempHight);
        }
 
        String batteryLower = entity.getBatteryLower();
        if (batteryLower != null) {
            stmt.bindString(9, batteryLower);
        }
 
        String devServerIp = entity.getDevServerIp();
        if (devServerIp != null) {
            stmt.bindString(10, devServerIp);
        }
 
        String devServerPort = entity.getDevServerPort();
        if (devServerPort != null) {
            stmt.bindString(11, devServerPort);
        }
 
        String sysDatetime = entity.getSysDatetime();
        if (sysDatetime != null) {
            stmt.bindString(12, sysDatetime);
        }
 
        java.util.Date inputTime = entity.getInputTime();
        if (inputTime != null) {
            stmt.bindLong(13, inputTime.getTime());
        }
 
        String rhLower = entity.getRhLower();
        if (rhLower != null) {
            stmt.bindString(14, rhLower);
        }
 
        String rhHight = entity.getRhHight();
        if (rhHight != null) {
            stmt.bindString(15, rhHight);
        }
 
        String tempAlarmFlag = entity.getTempAlarmFlag();
        if (tempAlarmFlag != null) {
            stmt.bindString(16, tempAlarmFlag);
        }
 
        String rhAlarmFlag = entity.getRhAlarmFlag();
        if (rhAlarmFlag != null) {
            stmt.bindString(17, rhAlarmFlag);
        }
 
        String batteryAlarmFlag = entity.getBatteryAlarmFlag();
        if (batteryAlarmFlag != null) {
            stmt.bindString(18, batteryAlarmFlag);
        }
 
        String extPowerAlarmFlag = entity.getExtPowerAlarmFlag();
        if (extPowerAlarmFlag != null) {
            stmt.bindString(19, extPowerAlarmFlag);
        }
 
        String unqualifyRecordFlag = entity.getUnqualifyRecordFlag();
        if (unqualifyRecordFlag != null) {
            stmt.bindString(20, unqualifyRecordFlag);
        }
 
        String nextUpdateFlag = entity.getNextUpdateFlag();
        if (nextUpdateFlag != null) {
            stmt.bindString(21, nextUpdateFlag);
        }
 
        String updateUrl = entity.getUpdateUrl();
        if (updateUrl != null) {
            stmt.bindString(22, updateUrl);
        }
 
        String destination = entity.getDestination();
        if (destination != null) {
            stmt.bindString(23, destination);
        }
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(24, orderNo);
        }
 
        String receiver = entity.getReceiver();
        if (receiver != null) {
            stmt.bindString(25, receiver);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(26, company);
        }
 
        String devTypeFlag = entity.getDevTypeFlag();
        if (devTypeFlag != null) {
            stmt.bindString(27, devTypeFlag);
        }
 
        String alarmInterval = entity.getAlarmInterval();
        if (alarmInterval != null) {
            stmt.bindString(28, alarmInterval);
        }
 
        String tempLower1 = entity.getTempLower1();
        if (tempLower1 != null) {
            stmt.bindString(29, tempLower1);
        }
 
        String tempHight1 = entity.getTempHight1();
        if (tempHight1 != null) {
            stmt.bindString(30, tempHight1);
        }
 
        String rhLower1 = entity.getRhLower1();
        if (rhLower1 != null) {
            stmt.bindString(31, rhLower1);
        }
 
        String rhHight1 = entity.getRhHight1();
        if (rhHight1 != null) {
            stmt.bindString(32, rhHight1);
        }
 
        String equipType = entity.getEquipType();
        if (equipType != null) {
            stmt.bindString(33, equipType);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SysResponseBean readEntity(Cursor cursor, int offset) {
        SysResponseBean entity = new SysResponseBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // devNum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // devEncryption
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // devSendCycle
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // devAutosend
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tempLower
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // tempHight
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // batteryLower
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // devServerIp
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // devServerPort
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // sysDatetime
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)), // inputTime
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // rhLower
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // rhHight
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // tempAlarmFlag
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // rhAlarmFlag
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // batteryAlarmFlag
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // extPowerAlarmFlag
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // unqualifyRecordFlag
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // nextUpdateFlag
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // updateUrl
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // destination
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // orderNo
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // receiver
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // company
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // devTypeFlag
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // alarmInterval
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // tempLower1
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // tempHight1
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // rhLower1
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // rhHight1
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32) // equipType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SysResponseBean entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDevNum(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDevEncryption(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDevSendCycle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDevAutosend(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTempLower(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTempHight(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBatteryLower(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDevServerIp(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDevServerPort(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSysDatetime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setInputTime(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
        entity.setRhLower(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setRhHight(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setTempAlarmFlag(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setRhAlarmFlag(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setBatteryAlarmFlag(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setExtPowerAlarmFlag(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setUnqualifyRecordFlag(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setNextUpdateFlag(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setUpdateUrl(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setDestination(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setOrderNo(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setReceiver(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setCompany(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setDevTypeFlag(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setAlarmInterval(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setTempLower1(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setTempHight1(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setRhLower1(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setRhHight1(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setEquipType(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SysResponseBean entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SysResponseBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SysResponseBean entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
