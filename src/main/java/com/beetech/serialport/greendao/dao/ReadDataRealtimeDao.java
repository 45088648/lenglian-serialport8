package com.beetech.serialport.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.beetech.serialport.bean.ReadDataRealtime;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "READ_DATA_REALTIME".
*/
public class ReadDataRealtimeDao extends AbstractDao<ReadDataRealtime, Long> {

    public static final String TABLENAME = "READ_DATA_REALTIME";

    /**
     * Properties of entity ReadDataRealtime.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property SensorId = new Property(1, String.class, "sensorId", false, "SENSOR_ID");
        public final static Property SensorDataTime = new Property(2, java.util.Date.class, "sensorDataTime", false, "SENSOR_DATA_TIME");
        public final static Property Temp = new Property(3, double.class, "temp", false, "TEMP");
        public final static Property Temp1 = new Property(4, double.class, "temp1", false, "TEMP1");
        public final static Property Temp2 = new Property(5, double.class, "temp2", false, "TEMP2");
        public final static Property Temp3 = new Property(6, double.class, "temp3", false, "TEMP3");
        public final static Property Temp4 = new Property(7, double.class, "temp4", false, "TEMP4");
        public final static Property Temp5 = new Property(8, double.class, "temp5", false, "TEMP5");
        public final static Property Temp6 = new Property(9, double.class, "temp6", false, "TEMP6");
        public final static Property Temp7 = new Property(10, double.class, "temp7", false, "TEMP7");
        public final static Property Rh = new Property(11, double.class, "rh", false, "RH");
        public final static Property Rh1 = new Property(12, double.class, "rh1", false, "RH1");
        public final static Property Rh2 = new Property(13, double.class, "rh2", false, "RH2");
        public final static Property Rh3 = new Property(14, double.class, "rh3", false, "RH3");
        public final static Property Rh4 = new Property(15, double.class, "rh4", false, "RH4");
        public final static Property Rh5 = new Property(16, double.class, "rh5", false, "RH5");
        public final static Property Rh6 = new Property(17, double.class, "rh6", false, "RH6");
        public final static Property Rh7 = new Property(18, double.class, "rh7", false, "RH7");
    }


    public ReadDataRealtimeDao(DaoConfig config) {
        super(config);
    }
    
    public ReadDataRealtimeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"READ_DATA_REALTIME\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"SENSOR_ID\" TEXT," + // 1: sensorId
                "\"SENSOR_DATA_TIME\" INTEGER," + // 2: sensorDataTime
                "\"TEMP\" REAL NOT NULL ," + // 3: temp
                "\"TEMP1\" REAL NOT NULL ," + // 4: temp1
                "\"TEMP2\" REAL NOT NULL ," + // 5: temp2
                "\"TEMP3\" REAL NOT NULL ," + // 6: temp3
                "\"TEMP4\" REAL NOT NULL ," + // 7: temp4
                "\"TEMP5\" REAL NOT NULL ," + // 8: temp5
                "\"TEMP6\" REAL NOT NULL ," + // 9: temp6
                "\"TEMP7\" REAL NOT NULL ," + // 10: temp7
                "\"RH\" REAL NOT NULL ," + // 11: rh
                "\"RH1\" REAL NOT NULL ," + // 12: rh1
                "\"RH2\" REAL NOT NULL ," + // 13: rh2
                "\"RH3\" REAL NOT NULL ," + // 14: rh3
                "\"RH4\" REAL NOT NULL ," + // 15: rh4
                "\"RH5\" REAL NOT NULL ," + // 16: rh5
                "\"RH6\" REAL NOT NULL ," + // 17: rh6
                "\"RH7\" REAL NOT NULL );"); // 18: rh7
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"READ_DATA_REALTIME\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ReadDataRealtime entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String sensorId = entity.getSensorId();
        if (sensorId != null) {
            stmt.bindString(2, sensorId);
        }
 
        java.util.Date sensorDataTime = entity.getSensorDataTime();
        if (sensorDataTime != null) {
            stmt.bindLong(3, sensorDataTime.getTime());
        }
        stmt.bindDouble(4, entity.getTemp());
        stmt.bindDouble(5, entity.getTemp1());
        stmt.bindDouble(6, entity.getTemp2());
        stmt.bindDouble(7, entity.getTemp3());
        stmt.bindDouble(8, entity.getTemp4());
        stmt.bindDouble(9, entity.getTemp5());
        stmt.bindDouble(10, entity.getTemp6());
        stmt.bindDouble(11, entity.getTemp7());
        stmt.bindDouble(12, entity.getRh());
        stmt.bindDouble(13, entity.getRh1());
        stmt.bindDouble(14, entity.getRh2());
        stmt.bindDouble(15, entity.getRh3());
        stmt.bindDouble(16, entity.getRh4());
        stmt.bindDouble(17, entity.getRh5());
        stmt.bindDouble(18, entity.getRh6());
        stmt.bindDouble(19, entity.getRh7());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ReadDataRealtime entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String sensorId = entity.getSensorId();
        if (sensorId != null) {
            stmt.bindString(2, sensorId);
        }
 
        java.util.Date sensorDataTime = entity.getSensorDataTime();
        if (sensorDataTime != null) {
            stmt.bindLong(3, sensorDataTime.getTime());
        }
        stmt.bindDouble(4, entity.getTemp());
        stmt.bindDouble(5, entity.getTemp1());
        stmt.bindDouble(6, entity.getTemp2());
        stmt.bindDouble(7, entity.getTemp3());
        stmt.bindDouble(8, entity.getTemp4());
        stmt.bindDouble(9, entity.getTemp5());
        stmt.bindDouble(10, entity.getTemp6());
        stmt.bindDouble(11, entity.getTemp7());
        stmt.bindDouble(12, entity.getRh());
        stmt.bindDouble(13, entity.getRh1());
        stmt.bindDouble(14, entity.getRh2());
        stmt.bindDouble(15, entity.getRh3());
        stmt.bindDouble(16, entity.getRh4());
        stmt.bindDouble(17, entity.getRh5());
        stmt.bindDouble(18, entity.getRh6());
        stmt.bindDouble(19, entity.getRh7());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ReadDataRealtime readEntity(Cursor cursor, int offset) {
        ReadDataRealtime entity = new ReadDataRealtime( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sensorId
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // sensorDataTime
            cursor.getDouble(offset + 3), // temp
            cursor.getDouble(offset + 4), // temp1
            cursor.getDouble(offset + 5), // temp2
            cursor.getDouble(offset + 6), // temp3
            cursor.getDouble(offset + 7), // temp4
            cursor.getDouble(offset + 8), // temp5
            cursor.getDouble(offset + 9), // temp6
            cursor.getDouble(offset + 10), // temp7
            cursor.getDouble(offset + 11), // rh
            cursor.getDouble(offset + 12), // rh1
            cursor.getDouble(offset + 13), // rh2
            cursor.getDouble(offset + 14), // rh3
            cursor.getDouble(offset + 15), // rh4
            cursor.getDouble(offset + 16), // rh5
            cursor.getDouble(offset + 17), // rh6
            cursor.getDouble(offset + 18) // rh7
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ReadDataRealtime entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSensorId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSensorDataTime(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setTemp(cursor.getDouble(offset + 3));
        entity.setTemp1(cursor.getDouble(offset + 4));
        entity.setTemp2(cursor.getDouble(offset + 5));
        entity.setTemp3(cursor.getDouble(offset + 6));
        entity.setTemp4(cursor.getDouble(offset + 7));
        entity.setTemp5(cursor.getDouble(offset + 8));
        entity.setTemp6(cursor.getDouble(offset + 9));
        entity.setTemp7(cursor.getDouble(offset + 10));
        entity.setRh(cursor.getDouble(offset + 11));
        entity.setRh1(cursor.getDouble(offset + 12));
        entity.setRh2(cursor.getDouble(offset + 13));
        entity.setRh3(cursor.getDouble(offset + 14));
        entity.setRh4(cursor.getDouble(offset + 15));
        entity.setRh5(cursor.getDouble(offset + 16));
        entity.setRh6(cursor.getDouble(offset + 17));
        entity.setRh7(cursor.getDouble(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ReadDataRealtime entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ReadDataRealtime entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ReadDataRealtime entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
