package com.beetech.serialport.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.beetech.serialport.bean.vt.VtSocketLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VT_SOCKET_LOG".
*/
public class VtSocketLogDao extends AbstractDao<VtSocketLog, Long> {

    public static final String TABLENAME = "VT_SOCKET_LOG";

    /**
     * Properties of entity VtSocketLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property InputTime = new Property(3, java.util.Date.class, "inputTime", false, "INPUT_TIME");
        public final static Property DataId = new Property(4, Long.class, "dataId", false, "DATA_ID");
        public final static Property ThreadName = new Property(5, String.class, "threadName", false, "THREAD_NAME");
    }


    public VtSocketLogDao(DaoConfig config) {
        super(config);
    }
    
    public VtSocketLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VT_SOCKET_LOG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"TEXT\" TEXT," + // 1: text
                "\"TYPE\" INTEGER NOT NULL ," + // 2: type
                "\"INPUT_TIME\" INTEGER," + // 3: inputTime
                "\"DATA_ID\" INTEGER," + // 4: dataId
                "\"THREAD_NAME\" TEXT);"); // 5: threadName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VT_SOCKET_LOG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VtSocketLog entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(2, text);
        }
        stmt.bindLong(3, entity.getType());
 
        java.util.Date inputTime = entity.getInputTime();
        if (inputTime != null) {
            stmt.bindLong(4, inputTime.getTime());
        }
 
        Long dataId = entity.getDataId();
        if (dataId != null) {
            stmt.bindLong(5, dataId);
        }
 
        String threadName = entity.getThreadName();
        if (threadName != null) {
            stmt.bindString(6, threadName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VtSocketLog entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(2, text);
        }
        stmt.bindLong(3, entity.getType());
 
        java.util.Date inputTime = entity.getInputTime();
        if (inputTime != null) {
            stmt.bindLong(4, inputTime.getTime());
        }
 
        Long dataId = entity.getDataId();
        if (dataId != null) {
            stmt.bindLong(5, dataId);
        }
 
        String threadName = entity.getThreadName();
        if (threadName != null) {
            stmt.bindString(6, threadName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public VtSocketLog readEntity(Cursor cursor, int offset) {
        VtSocketLog entity = new VtSocketLog( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // text
            cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // inputTime
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // dataId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // threadName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VtSocketLog entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setText(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setInputTime(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setDataId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setThreadName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VtSocketLog entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VtSocketLog entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VtSocketLog entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
