package com.beetech.serialport.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.beetech.serialport.bean.ModuleBuf;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MODULE_BUF".
*/
public class ModuleBufDao extends AbstractDao<ModuleBuf, Long> {

    public static final String TABLENAME = "MODULE_BUF";

    /**
     * Properties of entity ModuleBuf.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Buf = new Property(1, byte[].class, "buf", false, "BUF");
        public final static Property BufHex = new Property(2, String.class, "bufHex", false, "BUF_HEX");
        public final static Property Type = new Property(3, int.class, "type", false, "TYPE");
        public final static Property InputTime = new Property(4, java.util.Date.class, "inputTime", false, "INPUT_TIME");
        public final static Property Cmd = new Property(5, int.class, "cmd", false, "CMD");
        public final static Property Result = new Property(6, boolean.class, "result", false, "RESULT");
    }


    public ModuleBufDao(DaoConfig config) {
        super(config);
    }
    
    public ModuleBufDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MODULE_BUF\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"BUF\" BLOB," + // 1: buf
                "\"BUF_HEX\" TEXT," + // 2: bufHex
                "\"TYPE\" INTEGER NOT NULL ," + // 3: type
                "\"INPUT_TIME\" INTEGER," + // 4: inputTime
                "\"CMD\" INTEGER NOT NULL ," + // 5: cmd
                "\"RESULT\" INTEGER NOT NULL );"); // 6: result
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MODULE_BUF\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ModuleBuf entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        byte[] buf = entity.getBuf();
        if (buf != null) {
            stmt.bindBlob(2, buf);
        }
 
        String bufHex = entity.getBufHex();
        if (bufHex != null) {
            stmt.bindString(3, bufHex);
        }
        stmt.bindLong(4, entity.getType());
 
        java.util.Date inputTime = entity.getInputTime();
        if (inputTime != null) {
            stmt.bindLong(5, inputTime.getTime());
        }
        stmt.bindLong(6, entity.getCmd());
        stmt.bindLong(7, entity.getResult() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ModuleBuf entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        byte[] buf = entity.getBuf();
        if (buf != null) {
            stmt.bindBlob(2, buf);
        }
 
        String bufHex = entity.getBufHex();
        if (bufHex != null) {
            stmt.bindString(3, bufHex);
        }
        stmt.bindLong(4, entity.getType());
 
        java.util.Date inputTime = entity.getInputTime();
        if (inputTime != null) {
            stmt.bindLong(5, inputTime.getTime());
        }
        stmt.bindLong(6, entity.getCmd());
        stmt.bindLong(7, entity.getResult() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ModuleBuf readEntity(Cursor cursor, int offset) {
        ModuleBuf entity = new ModuleBuf( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1), // buf
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bufHex
            cursor.getInt(offset + 3), // type
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // inputTime
            cursor.getInt(offset + 5), // cmd
            cursor.getShort(offset + 6) != 0 // result
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ModuleBuf entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBuf(cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1));
        entity.setBufHex(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setInputTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setCmd(cursor.getInt(offset + 5));
        entity.setResult(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ModuleBuf entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ModuleBuf entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ModuleBuf entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
